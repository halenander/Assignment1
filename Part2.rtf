{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 This algorithm works by:\
\
-initiating an arraylist to hold index values\
\
-use a for loop to determine which sections are in order and log the start/end indices of said sections into the ArrayList\
\
-create a new empty array (tempArr) the same length as the input Array\
\
-start filling that array with the first sorted portion (and delete those indices from the arraylist)\
\
-in the while loop:\
	-create one array with the first sorted portion (grab from tempArr)\
\
	-create another array with the next sorted portion (and delete its indices)\
\
	-change the value of the index used to generate the first array from the tempArr\
\
	-use merge with the tempArr and the two newly generated arrays to merge them into tempArr\
\
	-the first array will be re-generated using the new index (i.e. it will be the sorted portion of 	tempArr)\
	\
	-the next array will be generated using the next set of indices in the ArrayList\
\
	-merge the two above arrays back into tempArr\
\
	-and so on\'85\
\
-the merge method is the same as the original merge algorithm\
\
In the worse case, this would have a runtime of O(n^2). This is if the array is in opposite order (greatest to least). Thus, the while loop (line 44) would run n times, and it would call the merge method each time, which contains a while loop (line 60) that would run n times. Thus, the runtime is O(n^2).}